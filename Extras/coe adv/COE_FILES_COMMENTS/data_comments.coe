memory_initialization_radix=16;
memory_initialization_vector=
20000000 # Data in line 3: It is expected to receibe 20000000 from the read operation. The read transaction read the address 0x0 , that represents the Master Control register. Mask allow to read only the 8 MSB, which are the version of the core.
00000000 # Data in line 4-to-7     are written in address 0x8000to 0x800C. Data in bynary is: '00000000000000000000000000000000' '10000000000000000 (010) (01) 0 0 (00000010)' '00000000000000000110 010000000000' '00000000000000000000000000000000'
80002402 # Data in line 4-to-7: These 128bits, written in memory 0x8000to 0x800C represents a read transaction from DUT to RAM, from the address 0x00 o RAM, a word of 32bits, with incremental type of burst and a burst of 3 words.
00006400 # Data in line 4-to-7: The 3 words read during the transaction are sotred in MSTRAM in the address 0xC400,0xC404,0xC408,
00000000 # Data in line 4-to-7: COE files are only for the driver. This DATA is being written from the driver (bit 16 in ctrl COE is 1) to the DUT in the specific DUT address. After DUT is enabled, it will used CMDRAM and MSTRAM in transactions.
00000040 # Data in line 8-to-11   are written in address 0x8010 to 0x801C. Data in bynary is: '00000000000000000000000001000000' '10000000000000000 (010) (01) 0 0 (00000011)' '00000000000000000000 000000010000' '00000000000000000000000000000000'
80002403 # Data in line 8-to-11: These 128bits, written in memory 0x8010 to 0x801C represents a read transaction from DUT to RAM, from the address 0x40 of RAM, a word of 32bits, with incremental type of burst and a burst of 4 words.
00000010 # Data in line 8-to-11: The 4 words read during the transaction are sotred in MSTRAM in the address 0xC010,0xC014,0xC018,0xC01C
00000000 # Data in line 8-to-11: COE files are only for the driver. This DATA is being written from the driver (bit 16 in ctrl COE is 1) to the DUT in the specific DUT address. After DUT is enabled, it will used CMDRAM and MSTRAM in transactions.
00000000 # Data in line 12-to-15: are written in address 0x9000 to 0x900C. Data in bynary is: '00000000000000000000000000000000' '10000000000000000 (010) (01) 0 0 (00000010)' '0000000000000000000 0000000000000' '00000000000000000000000000000000'
80002402 # Data in line 12-to-15: These 128bits, written in memory 0x9000 to 0x900C represents a write transaction from DUT to RAM, to the address 0x00 of RAM, a word of 32bits, with incremental type of burst and a burst of 3 words.
00000000 # Data in line 12-to-15: The 3 words written during the transaction are found into MSTRAM in the address 0xC000,0xC004,0xC008
00000000 # Data in line 12-to-15: COE files are only for the driver. This DATA is being written from the driver (bit 16 in ctrl COE is 1) to the DUT in the specific DUT address. After DUT is enabled, it will used CMDRAM and MSTRAM in transactions.
00000040 # Data in line 16-to-19: are written in address 0x9010 to 0x901C. Data in bynary is: '00000000000000000000000001000000' '10000000000000000 (010) (01) 0 0 (00000011)' '0000000000000000000 0000000010000' '00000000000000000000000000000000'
80002403 # Data in line 16-to-19: These 128bits, written in memory 0x9010 to 0x901C represents a write transaction from DUT to RAM, to the address 0x40 of RAM, a word of 32bits, with incremental type of burst and a burst of 4 words.
00000010 # Data in line 16-to-19: The 4 words written during the transaction are found into MSTRAM in the address 0xC010,0xC014,0xC018,0xC01C
00000000 # Data in line 16-to-19: COE files are only for the driver. This DATA is being written from the driver (bit 16 in ctrl COE is 1) to the DUT in the specific DUT address. After DUT is enabled, it will used CMDRAM and MSTRAM in transactions.
00000080 # Data in line 20-to-23: are written in address 0x9020 to 0x902C. Data in bynary is: '00000000000000000000000010000000' '10000000000000000 (010) (01) 0 0 (00000011)' '0000000000000000000 0000000100000' '00000000000000000000000000000000'
80002403 # Data in line 20-to-23: These 128bits, written in memory 0x9020 to 0x902C represents a write transaction from DUT to RAM, to the address 0x80 of RAM, a word of 32bits, with incremental type of burst and a burst of 4 words.
00000020 # Data in line 20-to-23: The 4 words written during the transaction are found into MSTRAM in the address 0xC020,0xC024,0xC028,0xC02C
00000000 # Data in line 20-to-23: COE files are only for the driver. This DATA is being written from the driver (bit 16 in ctrl COE is 1) to the DUT in the specific DUT address. After DUT is enabled, it will used CMDRAM and MSTRAM in transactions.
00000111 # Data in line 24, 0x111, is written in address 0xC000 (from driver to DUT). It means we are saving the data 0x111 in the  position Index (0x00) of the MSTRAM of the ATG Advance Mode.  
00000222 # Data in line 24, 0x222, is written in address 0xC004 (from driver to DUT). It means we are saving the data 0x222 in the  position Index (0x04) of the MSTRAM of the ATG Advance Mode. 
00000333 # Data in line 24, 0x333, is written in address 0xC008 (from driver to DUT). It means we are saving the data 0x333 in the  position Index (0x08) of the MSTRAM of the ATG Advance Mode. 
00000444 # Data in line 24, 0x444, is written in address 0xC00C (from driver to DUT). It means we are saving the data 0x444 in the  position Index (0x0C) of the MSTRAM of the ATG Advance Mode. 
00000555 # Data in line 24, 0x555, is written in address 0xC010 (from driver to DUT). It means we are saving the data 0x555 in the  position Index (0x10) of the MSTRAM of the ATG Advance Mode. 
00000666 # Data in line 24, 0x666, is written in address 0xC014 (from driver to DUT). It means we are saving the data 0x666 in the  position Index (0x14) of the MSTRAM of the ATG Advance Mode. 
00000777 # Data in line 24, 0x777, is written in address 0xC018 (from driver to DUT). It means we are saving the data 0x777 in the  position Index (0x18) of the MSTRAM of the ATG Advance Mode. 
00000888 # Data in line 24, 0x888, is written in address 0xC01C (from driver to DUT). It means we are saving the data 0x888 in the  position Index (0x1C) of the MSTRAM of the ATG Advance Mode. 
00000999 # Data in line 24, 0x999, is written in address 0xC020 (from driver to DUT). It means we are saving the data 0x999 in the  position Index (0x20) of the MSTRAM of the ATG Advance Mode. 
00000AAA # Data in line 24, 0xAAA, is written in address 0xC024 (from driver to DUT). It means we are saving the data 0xAAA in the  position Index (0x24) of the MSTRAM of the ATG Advance Mode. 
00000BBB # Data in line 24, 0xBBB, is written in address 0xC028 (from driver to DUT). It means we are saving the data 0xBBB in the  position Index (0x28) of the MSTRAM of the ATG Advance Mode. 
00000CCC # Data in line 24, 0xCCC, is written in address 0xC02C (from driver to DUT). It means we are saving the data 0xCCC in the  position Index (0x2C) of the MSTRAM of the ATG Advance Mode. 
00000DDD # Data in line 24, 0xDDD, is written in address 0xC030 (from driver to DUT). It means we are saving the data 0xDDD in the  position Index (0x30) of the MSTRAM of the ATG Advance Mode. 
00000EEE # Data in line 24, 0xEEE, is written in address 0xC034 (from driver to DUT). It means we are saving the data 0xEEE in the  position Index (0x34) of the MSTRAM of the ATG Advance Mode. 
00000FFF # Data in line 24, 0xFFF, is written in address 0xC038 (from driver to DUT). It means we are saving the data 0xFFF in the  position Index (0x38) of the MSTRAM of the ATG Advance Mode. 
0000012F # Same procedure from here on
00000010
00000011
00000012
00000013
00000014
00000015
00000016
00000017
00000018
00000019
0000001A
0000001B
0000001C
0000001D
0000001E
0000001F
00000020
00000021
00000022
00000023
00000024
00000025
00000026
00000027
00000028
00000029
0000002A
0000002B
0000002C
0000002D
0000002E
0000002F
00000030
00000031
00000032
00000033
00000034
00000035
00000036
00000037
00000038
00000039
0000003A
0000003B
0000003C
0000003D
0000003E
0000003F
00000040
00000041
00000042
00000043
00000044
00000045
00000046
00000047
00000048
00000049
0000004A
0000004B
0000004C
0000004D
0000004E
0000004F
00000050
00000051
00000052
00000053
00000054
00000055
00000056
00000057
00000058
00000059
0000005A
0000005B
0000005C
0000005D
0000005E
0000005F
00000060
00000061
00000062
00000063
00000064
00000065
00000066
00000067
00000068
00000069
0000006A
0000006B
0000006C
0000006D
0000006E
0000006F
00000070
00000071
00000072
00000073
00000074
00000075
00000076
00000077
00000078
00000079
0000007A
0000007B
0000007C
0000007D
0000007E
0000007F
80000000 # write error enable register in DUT with 10000000000000000000000000000000
00100000 # write master control register in DUT with 100000000000000000000 (enable the opearation of DUT)
80000000 # read error status register from DUT
00000000 # NOP operation
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
FFFFFFFF;
# LR - Verified for 2021.1

#<copyright-disclaimer-start>
#  ************************************************************************************************************
#  * Â© Copyright 2022 Xilinx, Inc. All rights reserved.                                                       *
#  * This file contains confidential and proprietary information of Xilinx, Inc. and                          *
#  * is protected under U.S. and international copyright and other intellectual property laws.                *
#  * DISCLAIMER                                                                                               *
#  * This disclaimer is not a license and does not grant any rights to the materials distributed              *
#  * herewith. Except as otherwise provided in a valid license issued to you by Xilinx, and to the            *
#  * maximum extent permitted by applicable law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS"               *
#  * AND WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES AND CONDITIONS, EXPRESS,                 *
#  * IMPLIED, OR STATUTORY, INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-INFRINGEMENT,     *
#  * OR FITNESS FOR ANY PARTICULAR PURPOSE; and (2) Xilinx shall not be liable (whether in contract or tort,  *
#  * including negligence, or under any other theory of liability) for any loss or damage of any kind or      *
#  * nature related to, arising under or in connection with these materials, including for any direct, or     *
#  * any indirect, special, incidental, or consequential loss or damage (including loss of data, profits,     *
#  * goodwill, or any type of loss or damage suffered as a result of any action brought by a third party)     *
#  * even if such damage or loss was reasonably foreseeable or Xilinx had been advised of the possibility     *
#  * of the same.                                                                                             *
#  * CRITICAL APPLICATIONS                                                                                    *
#  * Xilinx products are not designed or intended to be fail-safe, or for use in any application requiring    *
#  * fail-safe performance, such as life-support or safety devices or systems, Class III medical devices,     *
#  * nuclear facilities, applications related to the deployment of airbags, or any other applications that    *
#  * could lead to death, personal injury, or severe property or environmental damage (individually and       *
#  * collectively, "Critical Applications"). Customer assumes the sole risk and liability of any use of       *
#  * Xilinx products in Critical Applications, subject only to applicable laws and regulations governing      *
#  * limitations on product liability.                                                                        *
#  * THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS PART OF THIS FILE AT ALL TIMES.                 *
#  *                                                                                                          *
#  ************************************************************************************************************
#<copyright-disclaimer-end>
